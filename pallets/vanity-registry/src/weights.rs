//! Autogenerated weights for `vanity_registry`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-10-24, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/node-template
// benchmark
// --chain
// dev
// --pallet
// vanity-registry
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/vanity-registry/src/weights.rs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn commit() -> Weight;
	fn reveal(l: usize) -> Weight;
	fn renew() -> Weight;
	fn unregister() -> Weight;
}

/// Weight functions for `vanity_registry`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: VanityRegistry LockPeriods (r:2 w:1)
	// Storage: Balances Locks (r:1 w:1)
	fn commit() -> Weight {
		(57_300_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: VanityRegistry LockPeriods (r:1 w:1)
	// Storage: VanityRegistry Owners (r:1 w:1)
	fn reveal(_l: usize) -> Weight {
		(24_625_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: VanityRegistry Owners (r:1 w:1)
	fn renew() -> Weight {
		(9_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: VanityRegistry Owners (r:1 w:1)
	// Storage: VanityRegistry LockPeriods (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	fn unregister() -> Weight {
		(62_900_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
}

impl WeightInfo for () {
	fn commit() -> Weight {
		(57_300_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn reveal(_l: usize) -> Weight {
		(24_625_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn renew() -> Weight {
		(9_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn unregister() -> Weight {
		(62_900_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
}
